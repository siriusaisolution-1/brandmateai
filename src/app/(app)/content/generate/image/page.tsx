'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { BrandSelector } from '@/components/brand-selector';
import { run, GenkitError } from '@genkit-ai/flow';
import { generateImageFlow } from '@/ai/flows/generate-image';
import { AlertTriangle, Download } from 'lucide-react';
import Image from 'next/image';

export default function GenerateImagePage() {
  const [selectedBrandId, setSelectedBrandId] = useState<string | null>(null);
  const [prompt, setPrompt] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [generatedImageUrl, setGeneratedImageUrl] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleGenerate = async () => {
    if (!selectedBrandId || !prompt) {
      setError('Please select a brand and enter a prompt.');
      return;
    }
    setIsLoading(true);
    setError(null);
    setGeneratedImageUrl(null);

    try {
      const response = await run(generateImageFlow, {
        brandId: selectedBrandId,
        prompt,
      });
      setGeneratedImageUrl(response.url);
    } catch (e) {
      console.error(e);
      const errorMessage = e instanceof GenkitError ? e.message : 'An unexpected error occurred.';
      setError(errorMessage);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="p-4 md:p-8 grid md:grid-cols-2 gap-8">
      <Card className="bg-surface border-gray-700 self-start">
        <CardHeader>
          <CardTitle>AI Image Generator</CardTitle>
          <CardDescription>Create stunning, on-brand images from a simple text description.</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <Label>1. Select Your Brand</Label>
            <BrandSelector onBrandSelected={(id) => setSelectedBrandId(id)} disabled={isLoading} />
          </div>
          <div className="space-y-2">
            <Label>2. Describe the Image You Want</Label>
            <Textarea 
              value={prompt} 
              onChange={(e) => setPrompt(e.target.value)} 
              placeholder="e.g., A minimalist photo of a coffee cup on a clean desk, with natural morning light." 
              disabled={isLoading}
              rows={4}
            />
          </div>
          {error && <p className="text-sm text-error flex items-center gap-2"><AlertTriangle size={16} /> {error}</p>}
          <Button 
            onClick={handleGenerate} 
            disabled={isLoading || !selectedBrandId || !prompt} 
            className="w-full bg-primary hover:bg-primary/90"
          >
            {isLoading ? 'Generating Image...' : 'Generate Image'}
          </Button>
        </CardContent>
      </Card>

      <div className="flex flex-col items-center justify-center bg-surface border-gray-700 rounded-lg p-8 aspect-square">
        {isLoading && (
          <div className="w-full h-full bg-gray-800 rounded-md animate-pulse flex flex-col items-center justify-center">
             <p className="text-copy-secondary">Generating your masterpiece...</p>
          </div>
        )}
        {!isLoading && generatedImageUrl && (
          <div className="relative w-full h-full group">
            <Image
              src={generatedImageUrl}
              alt="Generated by BrandMate AI"
              layout="fill"
              objectFit="contain"
              className="rounded-md"
            />
            <a href={generatedImageUrl} download target="_blank" rel="noopener noreferrer"
               className="absolute top-2 right-2 bg-black/50 p-2 rounded-md opacity-0 group-hover:opacity-100 transition-opacity">
                <Download className="w-5 h-5 text-white" />
            </a>
          </div>
        )}
         {!isLoading && !generatedImageUrl && (
            <div className="text-center">
                <p className="text-copy-secondary">Your generated image will appear here.</p>
            </div>
         )}
      </div>
    </div>
  );
}
